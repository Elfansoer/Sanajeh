クラスの中で適用された関数の扱い方（クラスの中の関数に適用される関数ではない）



# Find all functions and variables they will be copied in device memory. HUNT THEM!
class HunterVisitor(ast.NodeVisitor):
    __sv = ScoutVisitor()
    variables = {}

    @property
    def classes(self):
        return self.__sv.classes

    def visit_Module(self, node):
        self.__sv.visit(node)

        for x in node.body:
            self.visit(x)
            # # Only visit those classes that are intended to be allocated in device
            # if type(x) is ast.ClassDef and x.name in self.classes:
            #     self.visit(x)

    # def visit_FunctionDef(self, node):

    def visit_AnnAssign(self, node):
        self.variables.setdefault(node.target.id, []).append(node.annotation.id)
        # print(self.variables)
        self.generic_visit(node)

        pn = node.parent
        #
        # To know whether a variable which appears in the value of the assignment is an argument, if so, then we don't
        # want to create a device version of this variable, if not so, the variable probably is an global variable(?) so
        # we need to mark that
        #
        # while (type(pn) is not ast.ClassDef) and (type(pn) is not ast.FunctionDef):
        #     pn = pn.parent
        # print(type(pn))

    def visit_BinOp(self, node):
        self.generic_visit(node)

    def visit_Assign(self, node):
        self.generic_visit(node)

    def visit_AugAssign(self, node):
        self.generic_visit(node)